#NON_TERMS
S ATRIB BLOCK BLOCO CMD DECL ESCR EXP_AR EXP_COND SENAO EXP_E EXP_NAOP EXP_SIMPLES FUNCT FUNCT_C FUNCT_CC FUNCT_S FUNCT_SC GERAL IDI IF LEIT MAIN MENOSP MUL NUM OPC PAR PARAM PAR_CALL PROT PROT_C PROT_S TOMA TYPE TYPEI

#TERMS
!= % ( ) * + , - / ; < <= = == > >= [ ] char const_char const_num const_real const_str e escreve id int le mainha nada nao ou real se senao tome uai vaza { }

#RULES
S GERAL

GERAL PROT FUNCT MAIN
GERAL PROT MAIN
GERAL FUNCT MAIN
GERAL MAIN

PROT PROT_S
PROT PROT_C

FUNCT FUNCT_S
FUNCT FUNCT_C

PROT_S PROT TYPE id ( ) ;
PROT_S TYPE id ( ) ;

PROT_C PROT TYPE id ( PARAM ) ;
PROT_C TYPE id ( PARAM ) ;

FUNCT_S FUNCT FUNCT_SC 
FUNCT_S FUNCT_SC

FUNCT_SC TYPE id ( ) { BLOCK }
FUNCT_SC TYPE id ( ) { }

FUNCT_C FUNCT FUNCT_CC 
FUNCT_C FUNCT_CC

FUNCT_CC TYPE id ( PARAM ) { BLOCK }
FUNCT_CC TYPE id ( PARAM ) { }

MAIN int mainha ( ) { BLOCK }
MAIN int mainha ( ) { }

TOMA tome EXP_AR 
TOMA tome 

BLOCK DECL BLOCO
BLOCK BLOCO
BLOCK DECL

BLOCO BLOCO CMD
BLOCO CMD

CMD IF 
CMD uai ( EXP_COND ) { BLOCO }
CMD uai ( EXP_COND ) { }
CMD ATRIB ;
CMD LEIT ;
CMD ESCR ;
CMD TOMA ;
CMD vaza ;
CMD id ( PAR_CALL ) ;
CMD id ( ) ;

IF se ( EXP_COND ) { BLOCO } SENAO
IF se ( EXP_COND ) { BLOCO }
IF se ( EXP_COND ) { } SENAO
IF se ( EXP_COND ) { }

SENAO senao { BLOCO }
SENAO senao { }

ATRIB id = EXP_AR 
ATRIB id [ EXP_AR ] = EXP_AR 

LEIT le ( id )
LEIT le ( id [ EXP_AR ] )

ESCR escreve ( EXP_AR )
ESCR escreve ( const_str )

DECL DECL TYPEI IDI ;
DECL TYPEI IDI ;

IDI id
IDI id [ EXP_AR ]
IDI id = EXP_AR

PARAM PARAM , PAR
PARAM PAR

PAR TYPEI id
PAR TYPEI id [ ]

TYPE int
TYPE real
TYPE char
TYPE nada

TYPEI int
TYPEI real
TYPEI char

PAR_CALL PAR_CALL , EXP_AR
PAR_CALL EXP_AR

EXP_AR EXP_AR + MUL
EXP_AR EXP_AR - MUL
EXP_AR MUL

MUL MUL * MENOSP
MUL MUL / MENOSP
MUL MUL % MENOSP
MUL MENOSP

MENOSP ( EXP_AR )
MENOSP - ( EXP_AR )
MENOSP - NUM
MENOSP NUM

NUM id
NUM id [ EXP_AR ]
NUM id ( PAR_CALL )
NUM id ( )
NUM const_num
NUM const_real
NUM const_char

EXP_COND EXP_COND ou EXP_E
EXP_COND EXP_E

EXP_E EXP_E e EXP_NAOP
EXP_E EXP_NAOP

EXP_NAOP nao EXP_SIMPLES
EXP_NAOP ( EXP_COND )
EXP_NAOP nao ( EXP_COND )
EXP_NAOP EXP_SIMPLES

EXP_SIMPLES EXP_AR OPC EXP_AR

OPC <
OPC <=
OPC >
OPC >=
OPC ==
OPC !=
